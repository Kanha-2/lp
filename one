
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract SimpleBank {
    

    mapping(address => uint256) private balances;
    
   
    event Deposit(address indexed accountHolder, uint256 amount);
    
    
    event Withdrawal(address indexed accountHolder, uint256 amount);
    
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint256 withdrawAmount) public {
        require(withdrawAmount > 0, "Withdraw amount must be greater than 0");
        require(balances[msg.sender] >= withdrawAmount, "Insufficient balance");
        balances[msg.sender] -= withdrawAmount;
        payable(msg.sender).transfer(withdrawAmount);
        emit Withdrawal(msg.sender, withdrawAmount);
    }
    
    function showBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}




# Import necessary libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("sales_data_sample.csv", encoding='Latin-1')

# Select features for clustering
data = df[['QUANTITYORDERED', 'PRICEEACH']]

# Normalize data
scaler = StandardScaler()
normalized_data = scaler.fit_transform(data)

# Determine the number of clusters using the elbow method
wcss = []
for k in range(1, 11):  # Use a smaller range for simplicity
    kmeans = KMeans(n_clusters=k, init='k-means++', random_state=10)
    kmeans.fit(normalized_data)
    wcss.append(kmeans.inertia_)

# Plot the elbow curve
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o')
plt.xlabel("Number of Clusters (k)")
plt.ylabel("WCSS (Within-Cluster Sum of Squares)")
plt.title("Elbow Method for Optimal k")
plt.show()

# From the plot, choose an appropriate k (for example, k=4)
optimal_k = 4
kmeans = KMeans(n_clusters=optimal_k, init='k-means++', random_state=10)
clusters = kmeans.fit_predict(normalized_data)

# Plot the clustered data
plt.figure(figsize=(8, 5))
plt.scatter(normalized_data[:, 0], normalized_data[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.xlabel('Quantity Ordered (Normalized)')
plt.ylabel('Price Each (Normalized)')
plt.title(f'K-Means Clustering (k={optimal_k})')
plt.colorbar(label='Cluster Label')
plt.show()









// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {

    struct Student {
        uint id;
        string name;
        uint age;
    }

    Student[] public students;

    uint public studentCount;

    function addStudent(string memory _name, uint _age) public {
        studentCount++;
        students.push(Student(studentCount, _name, _age));
    }

    function getStudent(uint _index) public view returns (uint, string memory, uint) {
        require(_index < students.length, "Invalid index");
        Student memory s = students[_index];
        return (s.id, s.name, s.age);
    }

    fallback() external payable {
        revert("Invalid function call or Ether not accepted.");
    }

    receive() external payable {}

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}
